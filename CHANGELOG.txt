# Change Log
All notable changes to this project will be documented in this file.

The format is based on [Keep a Changelog](http://keepachangelog.com/) 
and this project adheres to [Semantic Versioning](http://semver.org/).

## [Unreleased]
### Added
- Responsive sizing of all the elements
- Overdue reminders in basic car data component
- Highcharts charts component

## [0.4.0] - 2017-07-09
### Added
- Sorting fill ups and reminders list.
- *cars-list* and *car-details-view*
- Deleting a car
- Editing a car
- Editing and deleting a fill up and a reminder
- Trimming input fields and canceling input via cancel button or esc key.
- Adding a reminder.
- Showing reminders.
- Code commented and formatted.
- Redux wired in.
- Utlilities service-error handling
- Notification service
### Changed
- CarCards component now uses resolvers to fetch data.
- Accordion widget further developed.


## [0.3.0] - 2017-07-07
### Added
- *fill-up-detail* - display of single fill up details implemented
- *fill-ups-list*, *fill-ups-list-entry* - fill ups list basically implemented.
- *basic-car-data-, fill-ups, reminders* - these views wired into accordion component.
- *accordion.component.ts* - basic functionality of accordion widget.
### Fixed
- DataService is now returning correct data on add, update and delete operations.


## [0.2.0] - 2017-07-05
### Added
- Form validation for AddCar implemented.
- *cars-data-resolver* implemented.
- Routing module introduced. Rest of app modularized into Dasboard and AddCar modules.
- *add-car.component.ts* AddCar component basics implemented.
- routing.
- *add-car-button.component.ts* AddCarButton component.


## [0.1.0] - 2017-07-03
### Added
- *car-card.component.ts* CarCardsComponent which shows all car cards basically finished
- *car-card.component.ts* CarCardComponent which shows a single car card basically finished
- DataService class completed
- *data.service.ts* DataService class which handles HTTP requests towards the server; getCars(), getFillUps() and getReminders() methods implemented together with a belonging test
- *in-memory-data-service.ts* InMemoryDataService class which will stub the back end using InMemoryDbService.